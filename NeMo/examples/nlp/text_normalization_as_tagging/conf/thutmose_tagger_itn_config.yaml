name: &name itn
lang: ???        # e.g. 'ru', 'en'

# Pretrained Nemo Models
pretrained_model: null

trainer:
  devices: 1 # the number of gpus, 0 for CPU
  num_nodes: 1
  max_epochs: 3  # the number of training epochs
  enable_checkpointing: false  # provided by exp_manager
  logger: false  # provided by exp_manager
  accumulate_grad_batches: 1 # accumulates grads every k batches
  gradient_clip_val: 0.0
  precision: 32 # Should be set to 16 for O1 and O2 to enable the AMP.
  accelerator: gpu
  strategy: ddp
  log_every_n_steps: 1  # Interval of logging.
  val_check_interval: 1.0  # Set to 0.25 to check 4 times per epoch, or an int for number of iterations

model:
  do_training: true
  label_map: ???  # path/.../label_map.txt
  semiotic_classes: ???  # path/to/.../semiotic_classes.txt
  max_sequence_len: 128
  lang: ${lang}
  hidden_size: 768

  optim:
    name: adamw
    lr: 3e-5
    weight_decay: 0.1

    sched:
      name: WarmupAnnealing                      

      # pytorch lightning args
      monitor: val_loss
      reduce_on_plateau: false

      # scheduler config override
      warmup_ratio: 0.1
      last_epoch: -1

  language_model:
    pretrained_model_name: bert-base-uncased     # For ru, try DeepPavlov/rubert-base-cased | For de or multilingual, try bert-base-multilingual-cased
    lm_checkpoint: null
    config_file: null # json file, precedence over config
    config: null

  tokenizer:
    tokenizer_name: ${model.language_model.pretrained_model_name} # or sentencepiece
    vocab_file: null # path to vocab file
    tokenizer_model: null # only used if tokenizer is sentencepiece
    special_tokens: null

exp_manager:
  exp_dir: nemo_experiments # where to store logs and checkpoints
  name: training # name of experiment
  create_tensorboard_logger: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    save_top_k: 3
    monitor: "val_loss"
    mode: "min"
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.

tokenizer:
    tokenizer_name: ${model.transformer} # or sentencepiece
    vocab_file: null # path to vocab file
    tokenizer_model: null # only used if tokenizer is sentencepiece
    special_tokens: null

# Data
data:
  train_ds:
    data_path: ???  # provide the full path to the file
    batch_size: 8
    shuffle: true
    num_workers: 3
    pin_memory: false
    drop_last: false

  validation_ds:
    data_path: ???  # provide the full path to the file.
    batch_size: 8
    shuffle: false
    num_workers: 3
    pin_memory: false
    drop_last: false


# Inference
inference:
  from_file: null # Path to the raw text, no labels required. Each sentence on a separate line
  out_file: null # Path to the output file
  batch_size: 16 # batch size for inference.from_file
