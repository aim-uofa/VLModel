name: megatron_t5_glue_xnli

trainer:
  devices: 2
  num_nodes: 1
  accelerator: gpu
  precision: 16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: 3
  max_steps: -1 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10
  val_check_interval: 300
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  benchmark: False

exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: megatron_t5_glue_xnli
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: null
    name: null
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: validation_${model.data.validation_ds.metric.name}
    save_top_k: 10
    mode: max
    always_save_nemo: False # TODO: add support
    filename: 'megatron_t5--{${exp_manager.checkpoint_callback_params.monitor}:.3f}-{step}'
    model_parallel_size: ${model.tensor_model_parallel_size}
    save_best_model: True

model:
  restore_from_path: null # Path to a trained T5 .nemo file
  pretrained_checkpoint:
    checkpoint_dir: null # Path to a folder that contains a .ckpt file
    checkpoint_name: null # Name of the .ckpt file within the checkpoint_dir.
    hparams_file: null # Path to a .yaml file that contains the hyperparameters of the checkpoint.
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  pipeline_model_parallel_split_rank: 1
  gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
  resume_from_checkpoint: null
  megatron_amp_O2: False # Enable O2 optimization for megatron amp
  hidden_dropout: 0.1 # Override dropout prob from pretraining
  attention_dropout: 0.1 # Override attention dropout prob from pretraining 
  eval_languages: ['fr', 'de', 'en', 'es'] # List of languages to evaluate zero-shot XNLI performance.

  data:
    train_ds:
      task_name: 'mnli'
      file_path: ??? # Path to the TSV file for MNLI train ex: '/raid/Data/GLUE/MNLI/train.tsv'
      global_batch_size: 128
      micro_batch_size: 64
      shuffle: True
      num_workers: 0
      pin_memory: True
      max_seq_length: 512
      drop_last: True
      replace_bos_with_pad: False # Replaces bos with pad for both the encoder and decoder. This is necessary when using Google's T5 checkpoints.
      add_bos_to_input: True # Adds bos to the input sequence.
      add_eos_to_input: True # Adds eos to the input sequence.


    validation_ds:
      task_name: 'xnli'
      file_path: ??? # Path to the TSV file for XNLI dev ex: '/raid/Data/GLUE/MNLI/dev_matched.tsv'
      global_batch_size: 128
      micro_batch_size: 64
      shuffle: False
      num_workers: 0
      pin_memory: True
      max_seq_length: 512
      drop_last: False
      write_predictions_to_file: False
      prediction_file_path_prefix: null # Prefix of the file to write predictions to.
      replace_bos_with_pad: ${data.train_ds.replace_bos_with_pad}
      add_bos_to_input: ${data.train_ds.add_bos_to_input}
      add_eos_to_input: ${data.train_ds.add_eos_to_input}

      metric:
        name: "exact_string_match" # Name of the evaluation metric to use.
        average: null # Average the metric over the dataset. Options: ['macro', 'micro']. Works only for 'F1', 'accuracy' etc. Refer to torchmetrics for metrics where this is supported.
        num_classes: null

    test_ds:
      task_name: 'xnli'
      file_path: ??? # Path to the TSV file for XNLI dev ex: '/raid/Data/GLUE/MNLI/dev_matched.tsv'
      global_batch_size: 128
      micro_batch_size: 64
      shuffle: False
      num_workers: 0
      pin_memory: True
      max_seq_length: 512
      drop_last: False
      write_predictions_to_file: False
      output_file_path_prefix: null # Prefix of the file to write predictions to.
      replace_bos_with_pad: ${data.train_ds.replace_bos_with_pad}
      add_bos_to_input: ${data.train_ds.add_bos_to_input}
      add_eos_to_input: ${data.train_ds.add_eos_to_input}

      metric:
        name: "exact_string_match" # Name of the evaluation metric to use.
        average: null # Average the metric over the dataset. Options: ['macro', 'micro']. Works only for 'F1', 'accuracy' etc. Refer to torchmetrics for metrics where this is supported.
        num_classes: null

  optim:
    name: fused_adam
    lr: 5e-6
    weight_decay: 0.0
