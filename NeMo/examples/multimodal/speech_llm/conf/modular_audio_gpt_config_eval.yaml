# this config is used to perform inference on SpeechLLM checkpoints
name: megatron_audio_gpt_eval

trainer:
  devices: 1
  accelerator: gpu
  num_nodes: 1
  precision: bf16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: 1
  max_steps: 1000000
  log_every_n_steps: 10 # frequency with which training steps are logged 
  val_check_interval: 1.0 # If is an int n > 1, will run val every n training steps, if a float 0.0 - 1.0 will run val every epoch fraction, e.g. 0.25 will run val every quarter epoch
  gradient_clip_val: 1.0

exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: ${name}
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: null
    name: null
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: validation_${model.data.validation_ds.metric.name}
    save_top_k: 1
    mode: min
    save_nemo_on_train_end: True
    filename: '${name}--{${exp_manager.checkpoint_callback_params.monitor}:.3f}-{step}'
    model_parallel_size: ${model.tensor_model_parallel_size}
    always_save_nemo: True
    save_best_model: False

model:
  from_pretrained: null  # pretrained model name on NGC or HF
  restore_from_path: null # Path to an existing .nemo model you wish to add new tasks to or run inference with
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  pretrained_audio_model: null  # Path to a .nemo model for audio encoder

  seed: 1234
  tensor_model_parallel_size: 1 # intra-layer model parallelism
  pipeline_model_parallel_size: 1 # inter-layer model parallelism
  
  global_batch_size: 1
  micro_batch_size: 1
  sync_batch_comm: False
  megatron_amp_O2: False

  ## Sequence Parallelism
  # Makes tensor parallelism more memory efficient for LLMs (20B+) by parallelizing layer norms and dropout sequentially
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  sequence_parallel: False

  ## Activation Checkpoint 
  activations_checkpoint_granularity: null # 'selective' or 'full' 
  activations_checkpoint_method: null # 'uniform', 'block', not used with 'selective'
  # 'uniform' divides the total number of transformer layers and checkpoints the input activation
  # of each chunk at the specified granularity
  # 'block' checkpoints the specified number of layers per pipeline stage at the specified granularity
  activations_checkpoint_num_layers: null # not used with 'selective'
  activations_checkpoint_layers_per_pipeline: null
  answer_only_loss: False # not used right now
  gradient_as_bucket_view: False

  hidden_dropout: 0.0
  attention_dropout: 0.0
  ffn_dropout: 0.0

  peft: # keep these basic params for reusing in both sft and peft SpeechLMs
    restore_from_path: null
    restore_from_hparams_path: null
    restore_from_ckpt:
      checkpoint_name: null
      checkpoint_dir: null


  data:
    test_ds:
      names: null # Names of the corresponding datasets used to log metrics.
      global_batch_size: 1
      micro_batch_size: 1
      shuffle: False
      num_workers: 0
      pin_memory: True
      max_seq_length: 2048
      min_seq_length: 1
      drop_last: False
      end_string: ${data.train_ds.end_string}  # don't change, let hydra resolve from saved config
      context_key: ${data.train_ds.context_key} # don't change, let hydra resolve from saved config
      answer_key: ${data.train_ds.answer_key} # don't change, let hydra resolve from saved config
      add_eos: ${data.train_ds.add_eos} # don't change, let hydra resolve from saved config
      add_sep: ${data.train_ds.add_sep} # don't change, let hydra resolve from saved config
      add_bos: ${data.train_ds.add_bos} # don't change, let hydra resolve from saved config
      separate_prompt_and_response_with_newline: ${data.train_ds.separate_prompt_and_response_with_newline}
      write_predictions_to_file: True
      output_file_path_prefix: "preds" # Prefix of the file to write predictions to.
      truncation_field: ${data.train_ds.truncation_field}  # don't change, let hydra resolve from saved config
      index_mapping_dir: null # Path to a directory to write index mapping files.
      prompt_template: ${data.train_ds.prompt_template} # don't change, let hydra resolve from saved config
      tokens_to_generate: 512
      log_every_n_steps: 1
      sample_rate: ${data.train_ds.sample_rate} # don't change, let hydra resolve from saved config
      audio_locator: null # set it to allow multiple audios in a sample, e.g. '|audio|', and use it in the context field of manifest to specify the locations of audios (`audio_filepath` is a list of audios).

      metric:
        name: "bleu" # Name of the evaluation metric to use. Options: ['exact_string_match', 'loss', 'wer', 'bleu', 'rouge']
        average: null # Average the metric over the dataset. Options: ['macro', 'micro']. Works only for 'F1', 'accuracy' etc. Refer to torchmetrics for metrics where this is supported.
        num_classes: null

save_as_nemo: null  # optional string, set to save the whole model into a single nemo file

inference:
  greedy: True # Whether or not to use sampling ; use greedy decoding otherwise
  top_k: 0  # The number of highest probability vocabulary tokens to keep for top-k-filtering.
  top_p: 0.9 # If set to float < 1, only the most probable tokens with probabilities that add up to top_p or higher are kept for generation.
  temperature: 1.0 # sampling temperature
  all_probs: False  # whether return the log prob for all the tokens in vocab
  repetition_penalty: 1.2  # The parameter for repetition penalty. 1.0 means no penalty.
  min_tokens_to_generate: 0  # The minimum length of the sequence to be generated.
  compute_logprob: False  # a flag used to compute logprob of all the input text, a very special case of running inference, default False
  outfile_path: output.txt
  compute_attention_mask: True
